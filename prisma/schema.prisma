// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  externalId String     @unique
  name       String
  picture    String?
  email      String     @unique
  memberId   String?    @unique
  member     Member?    @relation(fields: [memberId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userRoles  UserRole[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  communityId String?
  community   Community?       @relation(fields: [communityId], references: [id])
  global      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userRoles   UserRole[]
  permissions RolePermission[]
}

model RolePermission {
  id         String   @id @default(uuid())
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  permission String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([permission, roleId])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id            String       @id @default(uuid())
  firstName     String
  lastName      String
  nickName      String?
  internalEmail String       @unique
  externalEmail String?
  phone         String?
  address       String?
  room          String?
  status        MemberStatus @default(NEWBIE)
  memberships   Membership[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User?
}

enum MemberStatus {
  NEWBIE
  ACTIVE
  PASSIVE
  DELETED
  ARCHIVED
  RETIRED
}

model Community {
  id          String       @id @default(uuid())
  name        String
  room        String?
  email       String?
  description String?
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roles       Role[]
}

model Membership {
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  position    String?
  updatedAt   DateTime  @updatedAt
  startDate   DateTime  @default(now())
  endDate     DateTime?

  @@id([memberId, communityId])
}
